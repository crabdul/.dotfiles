!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	0	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
# A collection of useful vim stuff	vim.md	/^# A collection of useful vim stuff$/;"	h
answer_is_yes	install.sh	/^answer_is_yes() {$/;"	f
ask	install.sh	/^ask() {$/;"	f
ask_for_confirmation	install.sh	/^ask_for_confirmation() {$/;"	f
execute	install.sh	/^execute() {$/;"	f
get_answer	install.sh	/^get_answer() {$/;"	f
print_error	install.sh	/^print_error() {$/;"	f
print_info	install.sh	/^print_info() {$/;"	f
print_question	install.sh	/^print_question() {$/;"	f
print_result	install.sh	/^print_result() {$/;"	f
print_success	install.sh	/^print_success() {$/;"	f
sync_iterm_with_dotfiles	install.sh	/^sync_iterm_with_dotfiles() {$/;"	f
main	install.sh	/^main() {$/;"	f
# Dotfiles ðŸŽˆ	README.md	/^# Dotfiles ðŸŽˆ$/;"	h
## Installation guide	README.md	/^## Installation guide$/;"	h
### ESLint	README.md	/^### ESLint$/;"	h
### Git templates	README.md	/^### Git templates$/;"	h
s:foreground	Tomorrow-Night.vim	/^let s:foreground = "c5c8c6"$/;"	v
s:background	Tomorrow-Night.vim	/^let s:background = "1d1f21"$/;"	v
s:selection	Tomorrow-Night.vim	/^let s:selection = "373b41"$/;"	v
s:line	Tomorrow-Night.vim	/^let s:line = "282a2e"$/;"	v
s:comment	Tomorrow-Night.vim	/^let s:comment = "969896"$/;"	v
s:red	Tomorrow-Night.vim	/^let s:red = "cc6666"$/;"	v
s:orange	Tomorrow-Night.vim	/^let s:orange = "de935f"$/;"	v
s:yellow	Tomorrow-Night.vim	/^let s:yellow = "f0c674"$/;"	v
s:green	Tomorrow-Night.vim	/^let s:green = "b5bd68"$/;"	v
s:aqua	Tomorrow-Night.vim	/^let s:aqua = "8abeb7"$/;"	v
s:blue	Tomorrow-Night.vim	/^let s:blue = "81a2be"$/;"	v
s:purple	Tomorrow-Night.vim	/^let s:purple = "b294bb"$/;"	v
s:window	Tomorrow-Night.vim	/^let s:window = "4d5057"$/;"	v
s:background	Tomorrow-Night.vim	/^	let s:background = "303030"$/;"	v
s:window	Tomorrow-Night.vim	/^	let s:window = "5e5e5e"$/;"	v
s:line	Tomorrow-Night.vim	/^	let s:line = "3a3a3a"$/;"	v
s:selection	Tomorrow-Night.vim	/^	let s:selection = "585858"$/;"	v
g:colors_name	Tomorrow-Night.vim	/^let g:colors_name = "Tomorrow-Night"$/;"	v
grey_number	Tomorrow-Night.vim	/^	fun <SID>grey_number(x)$/;"	f
grey_level	Tomorrow-Night.vim	/^	fun <SID>grey_level(n)$/;"	f
grey_colour	Tomorrow-Night.vim	/^	fun <SID>grey_colour(n)$/;"	f
rgb_number	Tomorrow-Night.vim	/^	fun <SID>rgb_number(x)$/;"	f
rgb_level	Tomorrow-Night.vim	/^	fun <SID>rgb_level(n)$/;"	f
rgb_colour	Tomorrow-Night.vim	/^	fun <SID>rgb_colour(x, y, z)$/;"	f
colour	Tomorrow-Night.vim	/^	fun <SID>colour(r, g, b)$/;"	f
rgb	Tomorrow-Night.vim	/^	fun <SID>rgb(rgb)$/;"	f
X	Tomorrow-Night.vim	/^	fun <SID>X(group, fg, bg, attr)$/;"	f
node	.eslintrc.js	/^        node: true,$/;"	P
es6	.eslintrc.js	/^        es6: true$/;"	P
ecmaVersion	.eslintrc.js	/^        ecmaVersion: 2017$/;"	P
extends	.eslintrc.js	/^    extends: [$/;"	P
plugins	.eslintrc.js	/^    plugins: [$/;"	P
vars	.eslintrc.js	/^                vars: "all",$/;"	P
args	.eslintrc.js	/^                args: "none",$/;"	P
ignoreRestSiblings	.eslintrc.js	/^                ignoreRestSiblings: true$/;"	P
printWidth	.eslintrc.js	/^                printWidth: 80,$/;"	P
tabWidth	.eslintrc.js	/^                tabWidth: 4,$/;"	P
useTabs	.eslintrc.js	/^                useTabs: false,$/;"	P
semi	.eslintrc.js	/^                semi: true,$/;"	P
singleQuote	.eslintrc.js	/^                singleQuote: true,$/;"	P
trailingComma	.eslintrc.js	/^                trailingComma: "es5",$/;"	P
bracketSpacing	.eslintrc.js	/^                bracketSpacing: true,$/;"	P
jsxBracketSameLine	.eslintrc.js	/^                jsxBracketSameLine: false,$/;"	P
rangeStart	.eslintrc.js	/^                rangeStart: 0,$/;"	P
rangeEnd	.eslintrc.js	/^                rangeEnd: Infinity$/;"	P
g:python_host_prog	.init.vim	/^let g:python_host_prog = $HOME."\/neovim2\/bin\/python"$/;"	v
g:python3_host_prog	.init.vim	/^let g:python3_host_prog = $HOME."\/neovim3\/bin\/python"$/;"	v
mapleader	.init.vim	/^let mapleader = ","              " display using :echo mapleader$/;"	v
Q	.init.vim	/^command! Q q$/;"	c
<leader>se	.init.vim	/^nmap <leader>se :tabe $MYVIMRC<cr>$/;"	m
<leader>sv	.init.vim	/^nmap <leader>sv :source $MYVIMRC<cr>$/;"	m
<leader>w	.init.vim	/^nmap <leader>w :w!<cr>$/;"	m
<leader>q	.init.vim	/^nmap <leader>q :q!<cr>$/;"	m
<	.init.vim	/^nmap < [$/;"	m
>	.init.vim	/^nmap > ]$/;"	m
<	.init.vim	/^omap < [$/;"	m
>	.init.vim	/^omap > ]$/;"	m
numbertoggle	.init.vim	/^augroup numbertoggle$/;"	a
SetWindowSizes	.init.vim	/^fun! SetWindowSizes()$/;"	f
<CR>	.init.vim	/^cnoremap <expr> <CR> getcmdtype() == '\/' ? '<CR>zz' : '<CR>'$/;"	m
<bs>	.init.vim	/^nnoremap <bs> :nohlsearch<CR>$/;"	m
gs	.init.vim	/^nnoremap gs \/<C-R><C-W>$/;"	m
<leader>;	.init.vim	/^noremap <leader>; :%s:::g<Left><Left><Left>$/;"	m
;\	.init.vim	/^cmap ;\\ \\(\\)<Left><Left>$/;"	m
<leader>d	.init.vim	/^nnoremap <leader>d zA$/;"	m
<leader>e	.init.vim	/^nnoremap <leader>e za$/;"	m
j	.init.vim	/^nnoremap <expr> j v:count ? 'j' : 'gj'$/;"	m
k	.init.vim	/^nnoremap <expr> k v:count ? 'k' : 'gk'$/;"	m
gV	.init.vim	/^nnoremap gV `[v`]$/;"	m
<C-j>	.init.vim	/^map <C-j> <C-W>j$/;"	m
<C-k>	.init.vim	/^map <C-k> <C-W>k$/;"	m
<C-h>	.init.vim	/^map <C-h> <C-W>h$/;"	m
<C-l>	.init.vim	/^map <C-l> <C-W>l$/;"	m
<leader>tn	.init.vim	/^map <leader>tn :tabnew<cr>$/;"	m
<leader>to	.init.vim	/^map <leader>to :tabonly<cr>$/;"	m
<leader>tc	.init.vim	/^map <leader>tc :tabclose<cr>$/;"	m
<leader>tm	.init.vim	/^map <leader>tm :tabmove<space>$/;"	m
H	.init.vim	/^nnoremap H gT$/;"	m
L	.init.vim	/^nnoremap L gt$/;"	m
<leader>te	.init.vim	/^map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>\/$/;"	m
<leader>p	.init.vim	/^nnoremap <leader>p "0p$/;"	m
<leader>P	.init.vim	/^nnoremap <leader>P "0P$/;"	m
CleanExtraSpaces	.init.vim	/^fun! CleanExtraSpaces()$/;"	f
<leader>ss	.init.vim	/^map <leader>ss :setlocal spell!<cr>$/;"	m
<leader>sa	.init.vim	/^map <leader>sa zg$/;"	m
<Leader>v	.init.vim	/^nnoremap <Leader>v :Files <C-R>=expand('%:p:h') . '\/'<CR><Cr>$/;"	m
gF	.init.vim	/^nmap <silent> gF <c-w>v<c-w>lgf$/;"	m
QuickFixListWithChangeFilesFromMaster	.init.vim	/^function! QuickFixListWithChangeFilesFromMaster()$/;"	f
<leader>cf	.init.vim	/^nnoremap <leader>cf :call QuickFixListWithChangeFilesFromMaster()<cr>$/;"	m
<leader>cp	.init.vim	/^nmap <leader>cp :let @*=expand("%:p")<CR>$/;"	m
g:session_dir	.init.vim	/^let g:session_dir = '~\/.vim-sessions'$/;"	v
Ëš	.init.vim	/^inoremap Ëš <Esc>:m .-2<CR>==gi$/;"	m
âˆ†	.init.vim	/^inoremap âˆ† <Esc>:m .+1<CR>==gi$/;"	m
<C-e>	.init.vim	/^inoremap <C-e> <C-o>\$$/;"	m
Y	.init.vim	/^nnoremap Y y\$$/;"	m
n	.init.vim	/^nnoremap n nzz$/;"	m
N	.init.vim	/^nnoremap N Nzz$/;"	m
<c-f>	.init.vim	/^nnoremap <c-f> <c-f>zz$/;"	m
<c-b>	.init.vim	/^nnoremap <c-b> <c-b>zz$/;"	m
Ëš	.init.vim	/^nnoremap Ëš :m--<CR>==$/;"	m
âˆ†	.init.vim	/^nnoremap âˆ† :m+<CR>==$/;"	m
gu	.init.vim	/^nnoremap gu :u1\\|u<CR>$/;"	m
<Leader>rc	.init.vim	/^nnoremap <Leader>rc :%s:\\<<C-r><C-w>\\>:$/;"	m
<Leader>cc	.init.vim	/^nnoremap <Leader>cc :%s:\\<<C-r><C-w>\\>:<C-r><C-w>$/;"	m
y	.init.vim	/^vnoremap y y']$/;"	m
K	.init.vim	/^vnoremap K :move '<-2<CR>gv=gv$/;"	m
J	.init.vim	/^vnoremap J :move '>+1<CR>gv=gv$/;"	m
âˆ†	.init.vim	/^vnoremap âˆ† :m '>+1<CR>gv=gv$/;"	m
Ëš	.init.vim	/^vnoremap Ëš :m '<-2<CR>gv=gv$/;"	m
<	.init.vim	/^vnoremap < <gv$/;"	m
>	.init.vim	/^vnoremap > >gv$/;"	m
<Leader>rc	.init.vim	/^vnoremap <Leader>rc y:%s:<C-r>":$/;"	m
<Leader>cc	.init.vim	/^vnoremap <Leader>cc y:%s:<C-r>":<C-r>"$/;"	m
%%	.init.vim	/^cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'\/' : '%%'$/;"	m
$$	.init.vim	/^cnoremap <expr> $$ getcmdtype() == ':' ? expand('%:p') : '$$'$/;"	m
ToggleNumber	.init.vim	/^function! ToggleNumber()$/;"	f
CmdLine	.init.vim	/^function! CmdLine(str)$/;"	f
VisualSelection	.init.vim	/^function! VisualSelection(direction, extra_filter) range$/;"	f
sp	.init.vim	/^vmap sp "zdi<p><C-R>z<\/p><ESC>$/;"	m
sd	.init.vim	/^vmap sd "zdi<div><C-R>z<\/div><ESC>$/;"	m
ss	.init.vim	/^vmap ss "zdi<span><C-R>z<\/span><ESC>$/;"	m
python_highlight_all	.init.vim	/^let python_highlight_all = 1$/;"	v
JavaScriptFold	.init.vim	/^function! JavaScriptFold()$/;"	f
g:palenight_terminal_italics	.init.vim	/^let g:palenight_terminal_italics=1$/;"	v
g:ale_linters	.init.vim	/^let g:ale_linters = {$/;"	v
g:ale_fixers	.init.vim	/^let g:ale_fixers = {$/;"	v
g:ale_fix_on_save	.init.vim	/^let g:ale_fix_on_save = 1$/;"	v
g:ale_pattern_options	.init.vim	/^let g:ale_pattern_options = {$/;"	v
g:ale_set_signs	.init.vim	/^let g:ale_set_signs = 0$/;"	v
g:ale_lint_on_text_changed	.init.vim	/^let g:ale_lint_on_text_changed = 'normal'$/;"	v
g:ale_lint_on_insert_leave	.init.vim	/^let g:ale_lint_on_insert_leave = 1$/;"	v
g:ale_lint_delay	.init.vim	/^let g:ale_lint_delay = 200$/;"	v
g:ale_lint_on_enter	.init.vim	/^let g:ale_lint_on_enter = 0$/;"	v
g:ale_linters_explicit	.init.vim	/^let g:ale_linters_explicit = 1$/;"	v
ic	.init.vim	/^omap ic <plug>(signify-motion-inner-pending)$/;"	m
ac	.init.vim	/^omap ac <plug>(signify-motion-outer-pending)$/;"	m
<leader>hv	.init.vim	/^nnoremap <leader>hv :SignifyDiff<cr>$/;"	m
LinterStatus	.init.vim	/^function! LinterStatus() abort$/;"	f
g:lightline	.init.vim	/^let g:lightline = {$/;"	v
<leader>a	.init.vim	/^map <leader>a :Ag<space>$/;"	m
<leader>f	.init.vim	/^nmap <leader>f :Files<cr>$/;"	m
<leader>b	.init.vim	/^nmap <leader>b :Buffers<CR>$/;"	m
<Leader>h	.init.vim	/^nmap <Leader>h :History<CR>$/;"	m
<Leader>l	.init.vim	/^nmap <Leader>l :BLines<CR>$/;"	m
<Leader>L	.init.vim	/^nmap <Leader>L :Lines<CR>$/;"	m
<Leader>'	.init.vim	/^nmap <Leader>' :Marks<CR>$/;"	m
<leader>t	.init.vim	/^nmap <leader>t :Tags<cr>$/;"	m
<leader>C	.init.vim	/^nmap <leader>C :Commands<cr>$/;"	m
<Leader>M	.init.vim	/^nmap <Leader>M :Maps<CR>$/;"	m
Fzfc	.init.vim	/^command! Fzfc call fzf#run(fzf#wrap($/;"	c
<Leader>c	.init.vim	/^noremap <Leader>c :Fzfc<cr>$/;"	m
g:fzf_action	.init.vim	/^let g:fzf_action = {$/;"	v
g:fzf_buffers_jump	.init.vim	/^let g:fzf_buffers_jump = 1"$/;"	v
g:fzf_colors	.init.vim	/^let g:fzf_colors =$/;"	v
Files	.init.vim	/^command! -bang -nargs=? -complete=dir Files$/;"	c
g:ackprg	.init.vim	/^  let g:ackprg = 'ag --vimgrep --smart-case'$/;"	v
gv	.init.vim	/^vnoremap <silent> gv :call VisualSelection('gv', '')<CR>$/;"	m
<leader>g	.init.vim	/^map <leader>g :Ack!<space>$/;"	m
gw	.init.vim	/^nmap gw :Ack! "\\b<cword>\\b" <CR>$/;"	m
<leader>r	.init.vim	/^vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>$/;"	m
<leader>cc	.init.vim	/^map <leader>cc :botright cope<cr>$/;"	m
<leader>co	.init.vim	/^map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg$/;"	m
<leader>x	.init.vim	/^map <leader>x :cclose<cr>$/;"	m
NERDTreeShowHidden	.init.vim	/^let NERDTreeShowHidden=0$/;"	v
NERDTreeIgnore	.init.vim	/^let NERDTreeIgnore = ['\\.pyc$', '__pycache__']$/;"	v
g:NERDTreeWinSize	.init.vim	/^let g:NERDTreeWinSize=35$/;"	v
<leader>nn	.init.vim	/^map <leader>nn :NERDTreeToggle<cr>$/;"	m
<leader>nb	.init.vim	/^map <leader>nb :NERDTreeFromBookmark<Space>$/;"	m
<leader>nf	.init.vim	/^map <leader>nf :NERDTreeFind<cr>$/;"	m
g:user_emmet_leader_key	.init.vim	/^let g:user_emmet_leader_key=','$/;"	v
g:user_emmet_install_global	.init.vim	/^let g:user_emmet_install_global = 0$/;"	v
g:user_emmet_settings	.init.vim	/^let g:user_emmet_settings = {'javascript.jsx': {'extends': 'jsx'}}$/;"	v
g:user_emmet_mode	.init.vim	/^let g:user_emmet_mode = 'i'$/;"	v
Expander	.init.vim	/^function! Expander()$/;"	f
<CR>	.init.vim	/^imap <expr> <CR> Expander()$/;"	m
g:gutentags_project_root	.init.vim	/^let g:gutentags_project_root = ['.git']$/;"	v
g:gutentags_generate_on_new	.init.vim	/^let g:gutentags_generate_on_new = 1$/;"	v
g:gutentags_generate_on_write	.init.vim	/^let g:gutentags_generate_on_write = 1$/;"	v
<TAB>	.init.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<S-TAB>	.init.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
check_back_space	.init.vim	/^function! s:check_back_space() abort$/;"	f
K	.init.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
show_documentation	.init.vim	/^function! s:show_documentation()$/;"	f
<leader>t	.init.vim	/^inoremap <silent><expr> <leader>t coc#refresh()$/;"	m
<leader>rn	.init.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
gd	.init.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gD	.init.vim	/^nmap <silent> gD <c-w>v<c-w>l<Plug>(coc-definition)$/;"	m
gi	.init.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gy	.init.vim	/^nmap <silent> gy <Plug>(coc-references)$/;"	m
<space>o	.init.vim	/^nnoremap <silent> <space>o  :<C-u>CocList outline<cr>$/;"	m
<space>s	.init.vim	/^nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>$/;"	m
<space>j	.init.vim	/^nnoremap <silent> <space>j  :<C-u>CocNext<CR>$/;"	m
<space>k	.init.vim	/^nnoremap <silent> <space>k  :<C-u>CocPrev<CR>$/;"	m
<space>p	.init.vim	/^nnoremap <silent> <space>p  :<C-u>CocListResume<CR>$/;"	m
g:UltiSnipsExpandTrigger	.init.vim	/^let g:UltiSnipsExpandTrigger="mm"$/;"	v
g:UltiSnipsEditSplit	.init.vim	/^let g:UltiSnipsEditSplit="vertical"$/;"	v
g:UltiSnipsSnippetDirectories	.init.vim	/^let g:UltiSnipsSnippetDirectories=['\/Users\/abdulkarim\/.vim\/ultisnips']$/;"	v
g:UltiSnipsJumpForwardTrigger	.init.vim	/^let g:UltiSnipsJumpForwardTrigger="<tab>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	.init.vim	/^let g:UltiSnipsJumpBackwardTrigger="<s-tab>"$/;"	v
delimitMate_expand_cr	.init.vim	/^let delimitMate_expand_cr = 1$/;"	v
G	.init.vim	/^command! G Gina$/;"	c
Gs	.init.vim	/^command! Gs Gina status -s$/;"	c
W	.init.vim	/^map <silent> W <Plug>CamelCaseMotion_w$/;"	m
B	.init.vim	/^map <silent> B <Plug>CamelCaseMotion_b$/;"	m
E	.init.vim	/^map <silent> E <Plug>CamelCaseMotion_e$/;"	m
gE	.init.vim	/^map <silent> gE <Plug>CamelCaseMotion_ge$/;"	m
iW	.init.vim	/^omap <silent> iW <Plug>CamelCaseMotion_iw$/;"	m
iB	.init.vim	/^omap <silent> iB <Plug>CamelCaseMotion_ib$/;"	m
iE	.init.vim	/^omap <silent> iE <Plug>CamelCaseMotion_ie$/;"	m
) hs.application.launchOrFocus	.hammerspoon/init.lua	/^hs.hotkey.bind(mash, 'J', function() hs.application.launchOrFocus('Google Chrome') end)$/;"	f
) hs.application.launchOrFocus	.hammerspoon/init.lua	/^hs.hotkey.bind(mash, 'M', function() hs.application.launchOrFocus('Safari') end)$/;"	f
) hs.application.launchOrFocus	.hammerspoon/init.lua	/^hs.hotkey.bind(mash, 'K', function() hs.application.launchOrFocus('iTerm') end)$/;"	f
) hs.application.launchOrFocus	.hammerspoon/init.lua	/^hs.hotkey.bind(mash, 'P', function() hs.application.launchOrFocus('Spotify') end)$/;"	f
) hs.application.launchOrFocus	.hammerspoon/init.lua	/^hs.hotkey.bind(mash, 'L', function() hs.application.launchOrFocus('Slack') end)$/;"	f
) hs.application.launchOrFocus	.hammerspoon/init.lua	/^hs.hotkey.bind(mash, 'H', function() hs.application.launchOrFocus('TickTick') end)$/;"	f
) hs.application.launchOrFocus	.hammerspoon/init.lua	/^hs.hotkey.bind(mash, 'U', function() hs.application.launchOrFocus('Quiver') end)$/;"	f
